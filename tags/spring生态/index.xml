<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Spring生态 - 标签 - Yiwenup - 持续沉淀</title><link>http://www.yiwenup.cloud/tags/spring%E7%94%9F%E6%80%81/</link><description>Spring生态 - 标签 - Yiwenup - 持续沉淀</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>97035457@qq.com (yiwenup)</managingEditor><webMaster>97035457@qq.com (yiwenup)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 30 Oct 2022 13:45:20 +0800</lastBuildDate><atom:link href="http://www.yiwenup.cloud/tags/spring%E7%94%9F%E6%80%81/" rel="self" type="application/rss+xml"/><item><title>02 ProxyFactory参考实现</title><link>http://www.yiwenup.cloud/proxyfactory%E5%8F%82%E8%80%83%E5%AE%9E%E7%8E%B0/</link><pubDate>Sun, 30 Oct 2022 13:45:20 +0800</pubDate><author>作者</author><guid>http://www.yiwenup.cloud/proxyfactory%E5%8F%82%E8%80%83%E5%AE%9E%E7%8E%B0/</guid><description>Spring Data JPA支持开发者在仅定义接口的情况下，能提供出通用的方法实现，这一点在之前源码跟踪的时候也猜测到了是采用动态代理机制实现的，并且在后续也</description></item><item><title>整合原生 SSM</title><link>http://www.yiwenup.cloud/%E6%95%B4%E5%90%88%E5%8E%9F%E7%94%9Fssm/</link><pubDate>Thu, 20 Oct 2022 19:12:32 +0800</pubDate><author>作者</author><guid>http://www.yiwenup.cloud/%E6%95%B4%E5%90%88%E5%8E%9F%E7%94%9Fssm/</guid><description>整合原生 SSM SSM指代SpringMVC、Spring、Mybatis，本次尝试以原生的方式进行整合，一方面是回顾历史了解SSM的过往，另一方</description></item><item><title>01 Spring Data JPA</title><link>http://www.yiwenup.cloud/springdatajpa/</link><pubDate>Thu, 20 Oct 2022 13:45:20 +0800</pubDate><author>作者</author><guid>http://www.yiwenup.cloud/springdatajpa/</guid><description>一、Spring Data JPA 认识 Spring Data JPA是在JPA规范之上封装的一个DAO层的框架。 JPA是一个持久层的规范，全称为Java Persistent API，在这个规范之</description></item><item><title>04_Spring MVC 附录</title><link>http://www.yiwenup.cloud/springmvc%E9%99%84%E5%BD%95/</link><pubDate>Mon, 10 Oct 2022 19:12:32 +0800</pubDate><author>作者</author><guid>http://www.yiwenup.cloud/springmvc%E9%99%84%E5%BD%95/</guid><description>Spring MVC 附录 一、中文乱码解决 1.1 页面乱码 对于原生Spring MVC的使用过程中，最原始的模版引擎是JSP渲染页面，若出现中文乱码，如下图所示： 则需</description></item><item><title>03_Spring MVC 源码分析</title><link>http://www.yiwenup.cloud/springmvc%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link><pubDate>Fri, 07 Oct 2022 19:12:32 +0800</pubDate><author>作者</author><guid>http://www.yiwenup.cloud/springmvc%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid><description>Spring MVC 源码分析 一、主流程梳理 根据Spring MVC依然是针对JavaEE的封装这个思路，而传统JavaEE开发是通过实现javax.servl</description></item><item><title>02_Spring MVC 高级应用</title><link>http://www.yiwenup.cloud/springmvc%E9%AB%98%E7%BA%A7%E5%BA%94%E7%94%A8/</link><pubDate>Mon, 08 Aug 2022 19:12:32 +0800</pubDate><author>作者</author><guid>http://www.yiwenup.cloud/springmvc%E9%AB%98%E7%BA%A7%E5%BA%94%E7%94%A8/</guid><description>Spring MVC 高级应用 一、监听器、过滤器和拦截器 1.1 监听器 监听器具体表现为实现了**javax.servlet.ServletContextListen</description></item><item><title>01. Spring Framework - IOC</title><link>http://www.yiwenup.cloud/spring%E6%8E%A2%E7%B4%A2-ioc/</link><pubDate>Wed, 15 Jun 2022 19:12:32 +0800</pubDate><author>作者</author><guid>http://www.yiwenup.cloud/spring%E6%8E%A2%E7%B4%A2-ioc/</guid><description>零、IOC 容器初始化三大步 this() register(componentClasses) refresh() 一、this 调用父类的构造函数，初始化BeanFactory 1 2 // DefaultListableBeanFactory 是 BeanFactory 最底层的、功能最全的实现，即我们常说</description></item><item><title>00. Spring Framework - 基础</title><link>http://www.yiwenup.cloud/spring%E5%9F%BA%E7%A1%80/</link><pubDate>Tue, 14 Jun 2022 19:12:32 +0800</pubDate><author>作者</author><guid>http://www.yiwenup.cloud/spring%E5%9F%BA%E7%A1%80/</guid><description>一、Spring 概览 1.1 Spring Data Access/Integration JDBC：提供了一个 JDBC 抽象层，它可以消除冗长的 JDBC 编码和解析数据库厂商特有的错误代码。 这个模块包含了 Spring 对 JDBC 数据访问</description></item><item><title>01_Spring MVC 基础应用</title><link>http://www.yiwenup.cloud/springmvc%E5%9F%BA%E7%A1%80%E5%BA%94%E7%94%A8/</link><pubDate>Tue, 07 Jun 2022 19:12:32 +0800</pubDate><author>作者</author><guid>http://www.yiwenup.cloud/springmvc%E5%9F%BA%E7%A1%80%E5%BA%94%E7%94%A8/</guid><description>Spring MVC 基础应用 一、MVC体系 1.1 三层架构和MVC模式 我们的开发架构一般都是基于两种形式，一种是C/S架构，也就是客户端/服务器；另一种是B/S架</description></item></channel></rss>